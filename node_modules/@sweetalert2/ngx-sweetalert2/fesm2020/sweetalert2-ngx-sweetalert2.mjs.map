{"version":3,"file":"sweetalert2-ngx-sweetalert2.mjs","sources":["../../../projects/ngx-sweetalert2/src/lib/di.ts","../../../projects/ngx-sweetalert2/src/lib/sweetalert2-loader.service.ts","../../../projects/ngx-sweetalert2/src/lib/swal.component.ts","../../../projects/ngx-sweetalert2/src/lib/swal.directive.ts","../../../projects/ngx-sweetalert2/src/lib/swal-portal.component.ts","../../../projects/ngx-sweetalert2/src/lib/swal-portal-targets.service.ts","../../../projects/ngx-sweetalert2/src/lib/swal-portal.directive.ts","../../../projects/ngx-sweetalert2/src/lib/sweetalert2.module.ts","../../../projects/ngx-sweetalert2/src/sweetalert2-ngx-sweetalert2.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport Swal from 'sweetalert2';\n\nexport const swalProviderToken = new InjectionToken<typeof Swal>('@sweetalert2/ngx-sweetalert2#swalProvider');\n\nexport const fireOnInitToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#fireOnInit');\n\nexport const dismissOnDestroyToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n","import { Inject, Injectable } from '@angular/core';\nimport SwalDefault, * as Swal from 'sweetalert2';\nimport { swalProviderToken } from './di';\n\nexport type SwalModule = typeof SwalDefault | typeof Swal;\n\nexport type SwalProvider = SwalModuleLoader | SwalModule;\n\nexport type SwalModuleLoader = () => Promise<SwalModule>;\n\n@Injectable()\nexport class SweetAlert2LoaderService {\n    private readonly swalProvider: SwalProvider;\n\n    private swalPromiseCache?: Promise<typeof SwalDefault>;\n\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    public constructor(@Inject(swalProviderToken) swalProvider: any) {\n        this.swalProvider = swalProvider;\n    }\n\n    public get swal(): Promise<typeof SwalDefault> {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n\n        return this.swalPromiseCache!;\n    }\n\n    public preloadSweetAlertLibrary(): void {\n        if (this.swalPromiseCache) return;\n\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n\n        function isLoader(value: SwalProvider): value is SwalModuleLoader {\n            return typeof value === 'function' && (value as any).version === undefined;\n        }\n\n        function isDefaultExport(value: SwalModule): value is typeof SwalDefault {\n            return typeof value === 'function';\n        }\n    }\n}\n","import {\n    AfterViewInit, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, OnInit,\n    Output, SimpleChanges\n} from '@angular/core';\nimport Swal, { SweetAlertOptions, SweetAlertResult, SweetAlertUpdatableParameters } from 'sweetalert2';\nimport { dismissOnDestroyToken, fireOnInitToken } from './di';\nimport * as events from './swal-events';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\n@Component({\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public icon: SweetAlertOptions['icon'];\n    @Input() public iconColor: SweetAlertOptions['iconColor'];\n    @Input() public iconHtml: SweetAlertOptions['iconHtml'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public showClass: SweetAlertOptions['showClass'];\n    @Input() public hideClass: SweetAlertOptions['hideClass'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public timerProgressBar: SweetAlertOptions['timerProgressBar'];\n    @Input() public heightAuto: SweetAlertOptions['heightAuto'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public stopKeydownPropagation: SweetAlertOptions['stopKeydownPropagation'];\n    @Input() public keydownListenerCapture: SweetAlertOptions['keydownListenerCapture'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showDenyButton: SweetAlertOptions['showDenyButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public denyButtonText: SweetAlertOptions['denyButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public denyButtonColor: SweetAlertOptions['denyButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public denyButtonAriaLabel: SweetAlertOptions['denyButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusDeny: SweetAlertOptions['focusDeny'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonHtml: SweetAlertOptions['closeButtonHtml'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public loaderHtml: SweetAlertOptions['loaderHtml'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public preDeny: SweetAlertOptions['preDeny'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public inputLabel: SweetAlertOptions['inputLabel'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public returnInputValueOnDeny: SweetAlertOptions['returnInputValueOnDeny'];\n    @Input() public validationMessage: SweetAlertOptions['validationMessage'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n    @Input() public scrollbarPadding: SweetAlertOptions['scrollbarPadding'];\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input()\n    public set swalOptions(options: SweetAlertOptions) {\n        //=> Update properties\n        Object.assign(this, options);\n\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options) as Array<keyof SweetAlertOptions>;\n        touchedKeys.forEach(this.markTouched);\n    }\n\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    public get swalOptions(): SweetAlertOptions {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce<SweetAlertOptions>(\n            (obj, key) => ({ ...obj, [key]: this[key as keyof this] }),\n            {});\n    }\n\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    @Input()\n    public swalFireOnInit?: boolean;\n\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    @Input()\n    public swalDismissOnDestroy?: boolean;\n\n    @Input()\n    public set swalVisible(visible: boolean) {\n        visible ? this.fire() : this.close();\n    }\n\n    public get swalVisible(): boolean {\n        return this.isCurrentlyShown;\n    }\n\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    @Output()\n    public readonly willOpen = new EventEmitter<events.WillOpenEvent>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    @Output()\n    public readonly didOpen = new EventEmitter<events.DidOpenEvent>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n     * repainted on the screen).\n     * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n     * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n     * {@link willOpen}.\n     */\n    @Output()\n    public readonly didRender = new EventEmitter<events.DidRenderEvent>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n     * being fired).\n     */\n    @Output()\n    public readonly willClose = new EventEmitter<events.WillCloseEvent>();\n\n    /**\n     * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n     * another popup being fired).\n     */\n    @Output()\n    public readonly didClose = new EventEmitter<void>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n     * popup.\n     * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n     * {@link didDestroy} over {@link didClose}.\n     */\n    @Output()\n    public readonly didDestroy = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    @Output()\n    public readonly deny = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link close} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly dismiss = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    private isCurrentlyShown = false;\n\n    public constructor(\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        @Inject(fireOnInitToken) private readonly moduleLevelFireOnInit: boolean,\n        @Inject(dismissOnDestroyToken) private readonly moduleLevelDismissOnDestroy: boolean) {\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    public ngOnInit(): void {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    public ngAfterViewInit(): void {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n\n        fireOnInit && this.fire();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key): key is keyof SweetAlertOptions => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    public ngOnDestroy(): void {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n\n        dismissOnDestroy && this.close();\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n     */\n    public async fire(): Promise<SweetAlertResult> {\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const userOptions = this.swalOptions;\n\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n\n            //=> Handle modal lifecycle events\n            willOpen: composeHook(userOptions.willOpen, (modalElement) => {\n                this.willOpen.emit({ modalElement });\n            }),\n            didOpen: composeHook(userOptions.didOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.didOpen.emit({ modalElement });\n            }),\n            didRender: composeHook(userOptions.didRender, (modalElement) => {\n                this.didRender.emit({ modalElement });\n            }),\n            willClose: composeHook(userOptions.willClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.willClose.emit({ modalElement });\n            }),\n            didClose: composeHook(userOptions.didClose, () => {\n                this.didClose.emit();\n            }),\n            didDestroy: composeHook(userOptions.didDestroy, () => {\n                this.didDestroy.emit();\n            })\n        };\n\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n\n        //=> Emit on (confirm), (deny) or (dismiss)\n        switch (true) {\n            case result.isConfirmed: this.confirm.emit(result.value); break;\n            case result.isDenied: this.deny.emit(); break;\n            case result.isDismissed: this.dismiss.emit(result.dismiss); break;\n        }\n\n        return result;\n\n        function composeHook<T extends (...args: any[]) => void>(\n            userHook: T | undefined,\n            libHook: T): (...args: Parameters<T>) => void {\n\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n     *               {@see Swal.close}.\n     */\n    public async close(result?: SweetAlertResult): Promise<void> {\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    public async update(options?: Pick<SweetAlertOptions, SweetAlertUpdatableParameters>): Promise<void> {\n        if (options) {\n            this.swalOptions = options;\n        }\n\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const allOptions = this.swalOptions;\n\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce<Pick<SweetAlertOptions, SweetAlertUpdatableParameters>>(\n                (obj, key) => ({ ...obj, [key]: allOptions[key] }),\n                {});\n\n        swal.update(updatableOptions);\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input()\n    public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        } else {\n            this.swalOptions = options;\n        }\n\n        function isArrayOptions(value: any): value is SweetAlertArrayOptions {\n            return Array.isArray(options);\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    @Output()\n    public readonly deny = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link dismiss} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly dismiss = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef?: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance?: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions?: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n     * (deny) and (dismiss) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (!this.swalInstance) return;\n\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n\n        const swalClosed = new Subject<void>();\n\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n        this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n@Component({\n    selector: 'swal-portal',\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPortalComponent {\n    @Input()\n    public template: TemplateRef<any> | null = null;\n}\n","import { Injectable } from '@angular/core';\nimport Swal, { SweetAlertOptions } from 'sweetalert2';\n\nexport interface SwalPortalTarget {\n    options?: SweetAlertOptions;\n    element(swal: typeof Swal): HTMLElement | null;\n}\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n@Injectable({ providedIn: 'root' })\nexport class SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    public readonly closeButton: SwalPortalTarget = {\n        element: swal => swal.getCloseButton(),\n        options: { showCloseButton: true }\n    };\n\n    /**\n     * Targets the modal title block contents.\n     */\n    public readonly title: SwalPortalTarget = {\n        element: swal => swal.getTitle(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { title: ' ' }\n    };\n\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    public readonly content: SwalPortalTarget = {\n        element: swal => swal.getHtmlContainer(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { text: ' ' }\n    };\n\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    public readonly actions: SwalPortalTarget = {\n        element: swal => swal.getActions(),\n        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly confirmButton: SwalPortalTarget = {\n        element: swal => swal.getConfirmButton(),\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the deny button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly denyButton: SwalPortalTarget = {\n        element: swal => swal.getDenyButton(),\n        options: { showDenyButton: true }\n    };\n\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly cancelButton: SwalPortalTarget = {\n        element: swal => swal.getCancelButton(),\n        options: { showCancelButton: true }\n    };\n\n    /**\n     * Targets the modal footer contents.\n     */\n    public readonly footer: SwalPortalTarget = {\n        element: swal => swal.getFooter(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { footer: ' ' }\n    };\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalComponent } from './swal.component';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPortal]'\n})\nexport class SwalPortalDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input('swalPortal')\n    public target?: SwalPortalTarget;\n\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    private portalComponentRef?: ComponentRef<SwalPortalComponent>;\n\n    private readonly destroyed = new Subject<void>();\n\n    public constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        private readonly swalTargets: SwalPortalTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n        this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n        this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n    }\n\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    public ngOnDestroy(): void {\n        this.destroyed.next();\n    }\n\n    /**\n     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link willOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    private async didRenderHook(): Promise<void> {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n\n        //=> Find target element\n        const targetEl = this.target!.element(swal);\n        if (!targetEl) return;\n\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n\n    /**\n     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    private willOpenHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n\n    /**\n     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    private didDestroyHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    private createPortalComponent(): ComponentRef<SwalPortalComponent> {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n\n        return componentRef;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from './di';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalPortalDirective } from './swal-portal.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\nimport { SwalProvider, SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\nexport interface Sweetalert2ModuleConfig {\n    provideSwal?: SwalProvider;\n    fireOnInit?: boolean;\n    dismissOnDestroy?: boolean;\n}\n\nexport function provideDefaultSwal() {\n    return import('sweetalert2');\n}\n\n@NgModule({\n    declarations: [\n        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPortalDirective, SwalDirective\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n\n    public static forChild(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.SweetAlert2LoaderService","i2.SwalPortalTargets","i3.SwalComponent"],"mappings":"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"}